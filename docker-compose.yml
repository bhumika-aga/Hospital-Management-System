version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: healthsync-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-healthsync_db}
      - POSTGRES_USER=${POSTGRES_USER:-healthsync_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-healthsync_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - healthsync-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-healthsync_user} -d ${POSTGRES_DB:-healthsync_db}",
        ]
      interval: 30s
      timeout: 5s
      retries: 5

  # Backend Service - Spring Boot Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: healthsync-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - JWT_SECRET=${JWT_SECRET:-healthsync-super-secret-jwt-key-change-in-production}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400000}
      - DATABASE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB:-healthsync_db}
      - DATABASE_USERNAME=${POSTGRES_USER:-healthsync_user}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD:-healthsync_password}
      - SPRING_JPA_SHOW_SQL=false
      - LOGGING_LEVEL_ROOT=INFO
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost}
    volumes:
      - backend-logs:/app/logs
    networks:
      - healthsync-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Frontend Service - React Application
  frontend:
    build:
      context: ./member-portal
      dockerfile: Dockerfile
    container_name: healthsync-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - healthsync-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:80/",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Reverse Proxy (Optional - for production-like setup)
  nginx-proxy:
    image: nginx:alpine
    container_name: healthsync-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - healthsync-network
    profiles:
      - production
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Admin (Optional - for development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: healthsync-pgadmin
    restart: unless-stopped
    ports:
      - "8082:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@healthsync.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - healthsync-network
    profiles:
      - development
    depends_on:
      - postgres

  # Monitoring (Optional)
  portainer:
    image: portainer/portainer-ce:latest
    container_name: healthsync-portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    networks:
      - healthsync-network
    profiles:
      - monitoring

# Volumes for data persistence
volumes:
  postgres-data:
    driver: local
  backend-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/logs
  pgadmin-data:
    driver: local
  portainer-data:
    driver: local

# Networks
networks:
  healthsync-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
